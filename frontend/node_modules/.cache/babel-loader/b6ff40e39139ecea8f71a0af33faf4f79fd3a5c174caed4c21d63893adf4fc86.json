{"ast":null,"code":"// src/components/Register.js\nimport React,{useState}from'react';// Register-komponentti käsittelee käyttäjän rekisteröinnin\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Register(){// useState hook luo tilan käyttäjän tiedoille: käyttäjänimi, salasana ja bio\nconst[user,setUser]=useState({username:'',password:'',bio:''});const[error,setError]=useState(null);const[success,setSuccess]=useState(false);// handleChange-funktio päivittää tilan, kun käyttäjä muuttaa lomakkeen kenttää\nconst handleChange=e=>{// Päivitetään vastaava kenttä tilassa\n};// handleSubmit-funktio käsittelee lomakkeen lähetyksen\nconst handleSubmit=async e=>{setUser({...user,[e.target.name]:e.target.value});e.preventDefault();setError(null);setSuccess(false);// Nollataan onnistumisviesti ennen uutta yritystä\n// Tulostetaan rekisteröityneen käyttäjän tiedot konsoliin\nconsole.log('Käyttäjä rekisteröitynyt:',user);// Näytetään ilmoitus onnistuneesta rekisteröinnistä\nalert('Käyttäjä rekisteröityi onnistuneesti');try{const response=await fetch('http://localhost:5000/api/users',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(user)});if(response.ok){const data=await response.json();console.log('Käyttäjä rekisteröitynyt:',data);setSuccess(true);// Asetetaan onnistumisviesti\n// Tyhjennä lomake kentät rekisteröinnin jälkeen\nsetUser({username:'',password:'',bio:''});}else{throw new Error('Rekisteröinti epäonnistui');}}catch(err){console.error('Virhe rekisteröinnissä:',err);setError('Rekisteröinti epäonnistui. Yritä uudelleen.');}};// Lomakkeen renderöinti\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Rekister\\xF6inti\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"K\\xE4ytt\\xE4j\\xE4nimi:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"username\",defaultValue:user.username,onChange:handleChange,required:true// Pakollinen kenttä\n})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Salasana:\",/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",defaultValue:user.password,onChange:handleChange,required:true// Pakollinen kenttä\n})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Bio:\",/*#__PURE__*/_jsx(\"textarea\",{name:\"bio\",defaultValue:user.bio,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Rekister\\xF6idy\"})]})]});}export default Register;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Register","user","setUser","username","password","bio","error","setError","success","setSuccess","handleChange","e","handleSubmit","target","name","value","preventDefault","console","log","alert","response","fetch","method","headers","body","JSON","stringify","ok","data","json","Error","err","children","onSubmit","type","defaultValue","onChange","required"],"sources":["C:/Users/23755/Documents/backupit 2/user-management-app/frontend/src/components/Register.js"],"sourcesContent":["// src/components/Register.js\r\nimport React, { useState } from 'react';\r\n\r\n// Register-komponentti käsittelee käyttäjän rekisteröinnin\r\nfunction Register() {\r\n    // useState hook luo tilan käyttäjän tiedoille: käyttäjänimi, salasana ja bio\r\n    const [user, setUser] = useState({ username: '', password: '', bio: '' });\r\n\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    // handleChange-funktio päivittää tilan, kun käyttäjä muuttaa lomakkeen kenttää\r\n    const handleChange = (e) => {\r\n        // Päivitetään vastaava kenttä tilassa\r\n    };\r\n    // handleSubmit-funktio käsittelee lomakkeen lähetyksen\r\n\r\n    const handleSubmit = async (e) => {\r\n        \r\n        setUser({\r\n            ...user,\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n        e.preventDefault();\r\n\r\n        setError(null);\r\n        setSuccess(false);  // Nollataan onnistumisviesti ennen uutta yritystä\r\n\r\n        // Tulostetaan rekisteröityneen käyttäjän tiedot konsoliin\r\n        console.log('Käyttäjä rekisteröitynyt:', user);\r\n        // Näytetään ilmoitus onnistuneesta rekisteröinnistä\r\n        alert('Käyttäjä rekisteröityi onnistuneesti');\r\n\r\n         try {\r\n            const response = await fetch('http://localhost:5000/api/users', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(user)\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                console.log('Käyttäjä rekisteröitynyt:', data);\r\n                setSuccess(true);  // Asetetaan onnistumisviesti\r\n                // Tyhjennä lomake kentät rekisteröinnin jälkeen\r\n                setUser({ username: '', password: '', bio: '' });\r\n            } else {\r\n                throw new Error('Rekisteröinti epäonnistui');\r\n            }\r\n        } catch (err) {\r\n            console.error('Virhe rekisteröinnissä:', err);\r\n            setError('Rekisteröinti epäonnistui. Yritä uudelleen.');\r\n        }\r\n    };\r\n\r\n    // Lomakkeen renderöinti\r\n    return (\r\n        <div>\r\n            <h2>Rekisteröinti</h2>\r\n\r\n            {/* Näytetään virheilmoitus, jos rekisteröinti epäonnistuu */}\r\n            {/*{error && <p style={{ color: 'red' }}>{error}</p>}*/}\r\n            {/* Näytetään onnistumisviesti, jos rekisteröinti onnistuu */}\r\n            {/*{success && <p style={{ color: 'green' }}>Rekisteröinti onnistui!</p>}*/}\r\n\r\n            {/* Lomakkeen lähetys kutsuu handleSubmit-funktiota */}\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Käyttäjänimi:\r\n                    {/* Tekstikenttä, joka päivittää username-tilan */}\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        defaultValue={user.username}\r\n                        onChange={handleChange}\r\n                        required  // Pakollinen kenttä\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Salasana:\r\n                    {/* Salasanojen syöttökenttä, joka päivittää password-tilan */}\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        defaultValue={user.password}\r\n                        onChange={handleChange}\r\n                        required  // Pakollinen kenttä\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Bio:\r\n                    {/* Tekstialue, joka päivittää bio-tilan */}\r\n                    <textarea\r\n                        name=\"bio\"\r\n                        defaultValue={user.bio}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n                <br />\r\n                {/* Rekisteröinti-painike */}\r\n                <button type=\"submit\">Rekisteröidy</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAEvC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,QAAS,CAAAC,QAAQA,CAAA,CAAG,CAChB;AACA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,CAAEQ,QAAQ,CAAE,EAAE,CAAEC,QAAQ,CAAE,EAAE,CAAEC,GAAG,CAAE,EAAG,CAAC,CAAC,CAEzE,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CAE7C;AACA,KAAM,CAAAe,YAAY,CAAIC,CAAC,EAAK,CACxB;AAAA,CACH,CACD;AAEA,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAAD,CAAC,EAAK,CAE9BT,OAAO,CAAC,CACJ,GAAGD,IAAI,CACP,CAACU,CAAC,CAACE,MAAM,CAACC,IAAI,EAAGH,CAAC,CAACE,MAAM,CAACE,KAC9B,CAAC,CAAC,CAEFJ,CAAC,CAACK,cAAc,CAAC,CAAC,CAElBT,QAAQ,CAAC,IAAI,CAAC,CACdE,UAAU,CAAC,KAAK,CAAC,CAAG;AAEpB;AACAQ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEjB,IAAI,CAAC,CAC9C;AACAkB,KAAK,CAAC,sCAAsC,CAAC,CAE5C,GAAI,CACD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iCAAiC,CAAE,CAC5DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACzB,IAAI,CAC7B,CAAC,CAAC,CAEF,GAAImB,QAAQ,CAACO,EAAE,CAAE,CACb,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClCZ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEU,IAAI,CAAC,CAC9CnB,UAAU,CAAC,IAAI,CAAC,CAAG;AACnB;AACAP,OAAO,CAAC,CAAEC,QAAQ,CAAE,EAAE,CAAEC,QAAQ,CAAE,EAAE,CAAEC,GAAG,CAAE,EAAG,CAAC,CAAC,CACpD,CAAC,IAAM,CACH,KAAM,IAAI,CAAAyB,KAAK,CAAC,2BAA2B,CAAC,CAChD,CACJ,CAAE,MAAOC,GAAG,CAAE,CACVd,OAAO,CAACX,KAAK,CAAC,yBAAyB,CAAEyB,GAAG,CAAC,CAC7CxB,QAAQ,CAAC,6CAA6C,CAAC,CAC3D,CACJ,CAAC,CAED;AACA,mBACIR,KAAA,QAAAiC,QAAA,eACInC,IAAA,OAAAmC,QAAA,CAAI,kBAAa,CAAI,CAAC,cAQtBjC,KAAA,SAAMkC,QAAQ,CAAErB,YAAa,CAAAoB,QAAA,eACzBjC,KAAA,UAAAiC,QAAA,EAAO,wBAEH,cACAnC,IAAA,UACIqC,IAAI,CAAC,MAAM,CACXpB,IAAI,CAAC,UAAU,CACfqB,YAAY,CAAElC,IAAI,CAACE,QAAS,CAC5BiC,QAAQ,CAAE1B,YAAa,CACvB2B,QAAQ,KAAE;AAAA,CACb,CAAC,EACC,CAAC,cACRxC,IAAA,QAAK,CAAC,cACNE,KAAA,UAAAiC,QAAA,EAAO,WAEH,cACAnC,IAAA,UACIqC,IAAI,CAAC,UAAU,CACfpB,IAAI,CAAC,UAAU,CACfqB,YAAY,CAAElC,IAAI,CAACG,QAAS,CAC5BgC,QAAQ,CAAE1B,YAAa,CACvB2B,QAAQ,KAAE;AAAA,CACb,CAAC,EACC,CAAC,cACRxC,IAAA,QAAK,CAAC,cACNE,KAAA,UAAAiC,QAAA,EAAO,MAEH,cACAnC,IAAA,aACIiB,IAAI,CAAC,KAAK,CACVqB,YAAY,CAAElC,IAAI,CAACI,GAAI,CACvB+B,QAAQ,CAAE1B,YAAa,CAC1B,CAAC,EACC,CAAC,cACRb,IAAA,QAAK,CAAC,cAENA,IAAA,WAAQqC,IAAI,CAAC,QAAQ,CAAAF,QAAA,CAAC,iBAAY,CAAQ,CAAC,EACzC,CAAC,EACN,CAAC,CAEd,CAEA,cAAe,CAAAhC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}